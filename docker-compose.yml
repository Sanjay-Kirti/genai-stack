version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: genai-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: genai_stack
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - genai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  chromadb:
    image: chromadb/chroma:latest
    container_name: genai-chromadb
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      IS_PERSISTENT: TRUE
      PERSIST_DIRECTORY: /chroma/chroma
    ports:
      - "8001:8000"
    networks:
      - genai-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: genai-backend
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/genai_stack
      CHROMA_HOST: chromadb
      CHROMA_PORT: 8000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    networks:
      - genai-network
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_started
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: genai-frontend
    ports:
      - "3000:80"
    networks:
      - genai-network
    depends_on:
      - backend
    environment:
      - NODE_ENV=production

networks:
  genai-network:
    driver: bridge

volumes:
  postgres_data:
  chroma_data:
